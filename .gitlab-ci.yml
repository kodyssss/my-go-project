stages:
  - build
  - sonarqube-check
  - docker-build-push

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  DOCKER_IMAGE_TAG: "$CI_COMMIT_TAG"
  DOCKER_IMAGE: "$CI_REGISTRY/$CI_NAMESPACE/my-go-app:$DOCKER_IMAGE_TAG"
  CI_REGISTRY_USER: "ybrkody"
  CI_REGISTRY_PASSWORD: "P@sswr0d"
  CI_REGISTRY: "registry.cn-chengdu.aliyuncs.com"
  CI_NAMESPACE: "ybr_rancher"

build:
  stage: build
  image: golang:1.20-alpine
  cache:
    paths:
      - /go/pkg/mod
      - /go/bin
  before_script:
    - sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories
    - apk add --no-cache git
    - go env -w GOPROXY=https://mirrors.aliyun.com/goproxy/,direct
  script:
    - go mod download
    - go test ./pkg/mylib
    - go build -o myapp ./cmd/myapp
  artifacts:
    paths:
      - myapp

sonarqube-check:
  stage: sonarqube-check
  dependencies:
    - build
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
    pull_policy: if-not-present
  cache:
    policy: pull
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - sonar-scanner/
  script: 
    - sonar-scanner
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG


docker-build-push:
  only:
    - tags
  stage: docker-build-push
  image: docker:20.10.16
  script:
    - docker build -t $DOCKER_IMAGE .
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push $DOCKER_IMAGE
